extend class PlayerTank {
    Quaternion rotation;
 
    bool useQuaternion;
 
 
    Property UseQuaternionRotation: useQuaternion;
 
    Default
    {
//        Monster;
  //      +THRUACTORS;
 //       +INTERPOLATEANGLES;
//        +LOOKALLAROUND;
 
//        Health 1000000;
//        Mass 999999;
 
        +NOBLOCKMAP;
        PlayerTank.UseQuaternionRotation false;
    }
 
    Vehicle_Hitbox SpawnHitBox(Class<Vehicle_Hitbox> hitbox, Vector3 offset, double radius, double height) {
        let a = Vehicle_Hitbox(Actor.Spawn(hitbox, pos));
        a.offset = offset;
        a.offset.x *= scale.x;
        a.offset.y *= scale.x;
        a.offset.z *= scale.y;
        a.A_SetSize(radius * scale.x, height * scale.y);
        a.master = self;
        return a;
    }

		TankHull SpawnTankHull(Class<TankHull> hitbox) {
        let a = TankHull(Actor.Spawn(hitbox, pos));
        if (!a)
          return null;
        a.angle = tankbasedirection;
        a.master = self;
        return a;
    }

    override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) {
   //     if(!source && !inflictor) {
  //          return 0;
 //       }
 
           if(source is "PlayerTank" ) {
           return 0;
        }
//		console.printf("%s",inflictor.DamageType);
        return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
    }

}
 
extend class PlayerHeavyTank {
    Quaternion rotation;
 
    bool useQuaternion;
 
 
    Property UseQuaternionRotation: useQuaternion;
 
    Default
    {
//        Monster;
  //      +THRUACTORS;
 //       +INTERPOLATEANGLES;
//        +LOOKALLAROUND;
 
//        Health 1000000;
//        Mass 999999;
 
        +NOBLOCKMAP;
        PlayerHeavyTank.UseQuaternionRotation false;
    }
 
    Vehicle_Hitbox SpawnHitBox(Class<Vehicle_Hitbox> hitbox, Vector3 offset, double radius, double height) {
        let a = Vehicle_Hitbox(Actor.Spawn(hitbox, pos));
        a.offset = offset;
        a.offset.x *= scale.x;
        a.offset.y *= scale.x;
        a.offset.z *= scale.y;
        a.A_SetSize(radius * scale.x, height * scale.y);
        a.master = self;
        return a;
    }

		HeavyTankHull SpawnHeavyTankHull(Class<HeavyTankHull> hitbox) {
        let a = HeavyTankHull(Actor.Spawn(hitbox, pos));
        if (!a)
          return null;
        a.angle = heavytankbasedirection;
        a.master = self;
        return a;
    }

    override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) {
   //     if(!source && !inflictor) {
  //          return 0;
 //       }
 
           if(source is "PlayerHeavyTank" ) {
           return 0;
        }
//		console.printf("%s",inflictor.DamageType);
        return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
    }

} 

extend class PlayerIFV {
    Quaternion rotation;
 
    bool useQuaternion;
 
 
    Property UseQuaternionRotation: useQuaternion;
 
    Default
    {
//        Monster;
  //      +THRUACTORS;
 //       +INTERPOLATEANGLES;
//        +LOOKALLAROUND;
 
//        Health 1000000;
//        Mass 999999;
 
        +NOBLOCKMAP;
        PlayerIFV.UseQuaternionRotation false;
    }
 
    Vehicle_Hitbox SpawnHitBox(Class<Vehicle_Hitbox> hitbox, Vector3 offset, double radius, double height) {
        let a = Vehicle_Hitbox(Actor.Spawn(hitbox, pos));
        a.offset = offset;
        a.offset.x *= scale.x;
        a.offset.y *= scale.x;
        a.offset.z *= scale.y;
        a.A_SetSize(radius * scale.x, height * scale.y);
        a.master = self;
        return a;
    }

		IFVHull SpawnIFVHull(Class<IFVHull> hitbox) {
        let a = IFVHull(Actor.Spawn(hitbox, pos));
        if (!a)
          return null;
        a.angle = ifvbasedirection;
        a.master = self;
        return a;
    }

    override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) {
   //     if(!source && !inflictor) {
  //          return 0;
 //       }
 
           if(source is "PlayerIFV" ) {
           return 0;
        }
//		console.printf("%s",inflictor.DamageType);
        return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
    }

}

 
class Vehicle_Hitbox : SwitchableDecoration
{
    Default
    {
        Health 999999999;
//        +NOGRAVITY;
        +SOLID;
        +SHOOTABLE;
        +NOBLOOD;
        Mass 999999999;
		+THRUSPECIES;
		Species "Abrams";
        +NEVERTARGET;
		+FRIENDLY;
		damagefactor "slime", 0.0;
	BloodType "TankBlood", "TankBlood", "TankBlood";
	damagefactor "stomp", 0;
	damagefactor "Incinerate", 0.0;
//	damagefactor "normal", 0.0;
	damagefactor "Treads", 0.0;
	DamageFactor "Repair", 0.0; damagefactor "CheckRepair", 0.0;
	damagefactor "Head", 0.0;	damagefactor "FriendBullet", 0.0;    damagefactor "Taunt", 0.0;    damagefactor "KillMe", 0.0;
	damagefactor "Shotgun", 0.0;    damagefactor "Shrapnel", 0.0;    damagefactor "Blood", 0.0;    damagefactor "BlueBlood", 0.0;
	damagefactor "Explosives", 5.5; damagefactor "bullet", 0.0; damagefactor "monsterbullet", 0.0; damagefactor "shotgun", 0; damagefactor "monstershotgun", 0.0; damagefactor "monsterminigun", 0.0;
	damagefactor "GreenBlood", 0.0;    damagefactor "MinorHead", 0.0;    damagefactor "Decaptate", 0.0;	damagefactor "MonsterKnocked", 0.0;
    damagefactor "CancelTeleportFog", 0.0;	damagefactor "BHFTOnBarrel", 0.0;	damagefactor "GibRemoving", 0.0;	damagefactor "SuperPunch", 0.0;
	damagefactor "HelperMarineFatallity", 0.0;	damagefactor "Leg", 0.0;	damagefactor "SpawnMarine", 0.0;	damagefactor "TeleportRemover", 0.0;
	DamageFactor "CauseObjectsToSplash", 0.0; DamageFactor "Trample", 0.0; DamageFactor "Minigun", 0.1; damageFactor "Machinegun", 0.1;
	DamageFactor "TankWeakSpot", 3.0; damagefactor "Plasma", 3.5; damagefactor "Plasma2", 4.5;
//	damagefactor "Desintegrate", 4.5;
//	damagefactor "Blast", 0.0;
//	damagefactor "ExplosiveImpact", 0.0;
//	damagefactor "Burn", 0.0;
    }
 
    Vector3 offset;
 
    override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) {
        return master ? master.DamageMobj(inflictor, source, damage, mod, flags, angle) : 0;
    }
    
    static Vector3 calculateOffset(Vector3 offset, Vector3 origin, double angle) {
        return origin + (cos(angle) * offset.x, sin(angle) * offset.x, 0) + (sin(-angle) * offset.y, cos(-angle) * offset.y, offset.z);
    }
 
    override void Activate (Actor activator)
    {
    master.Activate(activator);
    }
	
		override bool CanCollideWith(actor other,bool passive)
	{

		if (passive && other && other is "PlayerTank" || other is "TankGunShell" || other is "DoomerRailshot" || other is "AnnihilatorRailShot" || other is "PlayerIFV" || other is "HellFire" || other is "IFVProjectile"
		|| other is "PlayerHeavyTank" || other is "HeavyTankShell" || other is "HeavyTankBullet")
        {
            return false;
        }
	  return true;
	}
	
    virtual void OnDestroyed() {}
 
    override void Tick() 
{
        if(master)
		{

			Vector3 p;
            health = master.health;
			let ptank = PlayerTank(master);
			let itank = PlayerIFV(master);
			let htank = PlayerHeavyTank(master);
			
           if(master is "PlayerTank") 
			{
			  if (ptank) 
			  {
			  let lh = ptank.tha;
				  if (lh) 
					{
					 Quaternion r;
					r.FromEulerAngle(lh.angle, -lh.Pitch, lh.Roll);
					p = lh.Pos + r.Rotate(offset);
					SetOrigin(p, true);
					vel = lh.Vel;
					bThruActors = (abs(p.z - pos.z) > 64);
			         }
			  }
			 }
		else if(master is "PlayerIFV") 
			{
			  if (itank) 
			  {
			  let lh = itank.ifva;
				  if (lh) 
				  {
					 Quaternion r;
					r.FromEulerAngle(lh.angle, -lh.Pitch, lh.Roll);
					p = lh.Pos + r.Rotate(offset);
					SetOrigin(p, true);
					vel = lh.Vel;
					bThruActors = (abs(p.z - pos.z) > 64);
				  }
			  }
            }
		else if(master is "PlayerHeavyTank") 
			{
			  if (htank) 
			  {
			  let lh = htank.hva;
			  if (lh) {
				 Quaternion r;
                r.FromEulerAngle(lh.angle, -lh.Pitch, lh.Roll);
                p = lh.Pos + r.Rotate(offset);
				SetOrigin(p, true);
				vel = lh.Vel;
				bThruActors = (abs(p.z - pos.z) > 64);
			  }
			}
		   }	
			else 
			{
				onDestroyed();
				Destroy();
			}	   		

		}

    }
 
    States {
        Spawn:
            TNT1 A 1;
			loop;
			}
}